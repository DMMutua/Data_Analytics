# -*- coding: utf-8 -*-
"""MC0820-02_Workings

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-uon8Jvnav9UO576oQNXstE46jerIF3v
"""

!pip install numpy
!pip install scipy

import numpy as np
from scipy import stats

# Data
ln_v = np.array([-1.5828, -0.9872, -0.5113, -0.2683, -0.1231, -0.0856, 0.2124, 0.3661, 0.5095, 0.6148])
ln_i = np.array([-3.0428, -2.3497, -1.6363, -1.2917, -0.9681, -1.7131, -0.1035, 0.3115, 0.5753, 0.7601])

# Perform linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(ln_v, ln_i)

# Intercept corresponds to ln(8μ)
intercept_ln8mu = intercept

# Solve for μ
mu = np.exp(intercept_ln8mu) / 8

print(f"Intercept (ln(8μ)): {intercept_ln8mu}")
print(f"Viscosity (μ): {mu}")

"""2. A Summary of The Code is Given Below;"""

# Necessary Python Libraries
pip install numpy
pip install scipy

import numpy as np
from scipy import stats

# Data
ln_v = np.array([-1.5828, -0.9872, -0.5113, -0.2683, -0.1231, -0.0856, 0.2124, 0.3661, 0.5095, 0.6148])
ln_i = np.array([-3.0428, -2.3497, -1.6363, -1.2917, -0.9681, -1.7131, -0.1035, 0.3115, 0.5753, 0.7601])

# Perform linear regression
slope, intercept, r_value, p_value, std_err = stats.linregress(ln_v, ln_i)

# Intercept corresponds to ln(8μ)
intercept_ln8mu = intercept

# Solve for μ
mu = np.exp(intercept_ln8mu) / 8

print(f"Intercept (ln(8μ)): {intercept_ln8mu}")
print(f"Viscosity (μ): {mu}")

"""3. Calculating f for each data point;"""

g = 9.81 # Acceleration due to gravity (m/s^2)

f_values = (2 * g * np.exp(ln_i)) / np.exp(2 * ln_v)
print(f_values)

"""Calculating Reynolds Number for Each Measurement.."""

D = 0.1 # Pipe Diameter
# ρ is approximately 1000 kg/m³ For Water at 20 C

#Reynolds Numbers for Each Measurement
Re_values = (1000 * np.exp(ln_v) * D) / mu
print(Re_values)

type(Re_values)

"""4. Calculating the Transitional Velocity `(Vt)`"""

#Data for Laminar Flow
ln_Re_laminar = secondRe_values
ln_f_laminar = secondf_values

#  Perform linear regression for laminar flow
slope_laminar, intercept_laminar, r_value_laminar, p_value_laminar, std_err_laminar = stats.linregress(ln_Re_laminar, ln_f_laminar)

# Calculate the intersection point with the x-axis (transition point)
vt = np.exp(-intercept_laminar / slope_laminar)
transition_Re = np.exp(-intercept_laminar) / slope_laminar

print(f"Transitional Velocity (vt): {vt}")
print(f"Transitional Reynolds Number (Re_t): {transition_Re}")

secondf_values = (2 * g * ln_i) / ln_v ** 2
print(secondf_values)

secondRe_values = (1000 * ln_v * D) / mu
print(secondRe_values)


# -*- coding: utf-8 -*-
"""Momentum_effects_stockPrices(MC0713-01).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VQQC9Nxa3xv4F3UseunJskbMUP_Bo6X5

# THE MOMENTUM EFFECT IN STOCK PRICES
"""

# Installing necessary libraries
!pip install pandas
!pip install matplotlib
!pip install seaborn

# Loading the dataset
import pandas as pd
df = pd.read_csv('/momentum_paneldata.csv')
print(df.head())

"""## ***Now, Creating a Visualization of each and every stock in a pallete...***"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Convert the 'date' column to datetime format
df['date'] = pd.to_datetime(df['date'])

# Create a line plot for each ticker symbol
plt.figure(figsize=(12, 20))
sns.set_palette("husl")  # Set a color palette for the plots

tickers = df['TICKER'].unique()
num_tickers = len(tickers)
rows = num_tickers // 5 + (1 if num_tickers % 5 != 0 else 0)

for i, ticker in enumerate(tickers, 1):
    plt.subplot(rows, 5, i)
    ticker_data = df[df['TICKER'] == ticker]
    plt.plot(ticker_data['date'], ticker_data['PRC'], label=ticker)
    plt.xlabel('Date')
    plt.ylabel('Stock Price')
    plt.title(ticker)
    plt.legend()
    plt.grid(True)

plt.tight_layout()
plt.show()

"""# Momentum Analytics of Stock Prices Using Fama-Macbeth.
*Steps*
1. **Monthly Returns Calculation** -  for Each Stock based on Given Stock Prices.
2. **Portfolio Sorting** - Done to Consturct Portfolios of past winners and Losers.
3. **Fama-MacBeth Regression** - To Finally  Analyze Momentum Effects.
"""

!pip install statsmodels

# Convert the 'date' column to datetime format
df['date'] = pd.to_datetime(df['date'])

# Calculating Monthly Returns
df['Returns'] = df.groupby('TICKER')['PRC'].pct_change()

#Ensuring Each Ticker has atleast three data points
ticker_counts = df['TICKER'].value_counts()
valid_tickers = ticker_counts[ticker_counts >= 3].index

#Filtering Dataframe to Include Only Valid Tickers
df = df[df['TICKER'].isin(valid_tickers)]

print(df.tail())

"""### In Sorting Portfolio's; It is assumed that;


1.   Top 30% of Best Performers are Winners.
2.   Bottom 30% In Performance are Losers.


"""

# Sorting Stocks as Winners and Losers Based On Returns...
winners = df.groupby('TICKER')['Returns'].nlargest(int(len(df) * 0.3)).reset_index(level=1, drop=True)
losers = df.groupby('TICKER')['Returns'].nsmallest(int(len(df) * 0.3)).reset_index(level=1, drop=True)

# Portfolio Creation for Winners and Losers.
#portfolio_winners = df.loc[winners.index]
#portfolio_losers = df.loc[losers.index]

portfolio_winners = df[df.groupby('TICKER')['Returns'].transform(lambda x: x >= x.quantile(0.7))]
portfolio_losers = df[df.groupby('TICKER')['Returns'].transform(lambda x: x <= x.quantile(0.3))]

"""### Performing Fama-MacBeth Regression on the Portfolios...

"""

import statsmodels.api as sm

X = sm.add_constant(portfolio_winners['Returns'])
y = portfolio_winners.groupby('TICKER')['Returns'].shift(-1)
model_winners = sm.OLS(y, X, missing='drop').fit()

X = sm.add_constant(portfolio_losers['Returns'])
y = portfolio_losers.groupby('TICKER')['Returns'].shift(-1)
model_losers = sm.OLS(y, X, missing='drop').fit()

"""### *Displaying the Regression Results for Both the Winners and Losers*"""

print("Fama-MacBeth Regression Results for Winners:")
print(model_winners.summary())

print("\nFama-MacBeth Regression Results for Losers:")
print(model_losers.summary())